{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to AWS Services Workshop From the workshop menu please navigate to the workshop you'd like to explore.","title":"Home"},{"location":"index.html#welcome-to-aws-services-workshop","text":"From the workshop menu please navigate to the workshop you'd like to explore.","title":"Welcome to AWS Services Workshop"},{"location":"grc341/index.html","text":"Welcome to re:Inforce 2019 Introduction This AWS Continuous Server Hardening workshop is a hands-on session designed to show attendees how they can continuously keep their linux servers hardened with the CIS benchmarks using AWS Systems Manager, AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy and AWS CodePipeline. Pre-requisites An internet connected laptop with the following installed: Integrated Development Environment (IDE) Git AWS Command Line Interface (CLI) SSH client installed AWS account with admin privileges Intermediate AWS experience","title":"Introduction"},{"location":"grc341/index.html#welcome-to-reinforce-2019","text":"","title":"Welcome to re:Inforce 2019"},{"location":"grc341/index.html#introduction","text":"This AWS Continuous Server Hardening workshop is a hands-on session designed to show attendees how they can continuously keep their linux servers hardened with the CIS benchmarks using AWS Systems Manager, AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy and AWS CodePipeline.","title":"Introduction"},{"location":"grc341/index.html#pre-requisites","text":"An internet connected laptop with the following installed: Integrated Development Environment (IDE) Git AWS Command Line Interface (CLI) SSH client installed AWS account with admin privileges Intermediate AWS experience","title":"Pre-requisites"},{"location":"grc341/module-1.html","text":"Objective In this module we will create a CodeCommit repository to store our Ansible playbook and supporting files. We will also download the workshop artifacts that contain the Ansible playbook and copy them to our local repository While this should work in any commercial region, it was tested specifically in US-East-1. Prerequisites Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client. Create CodeCommit repository Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1 Create IAM user If you don't already have an IAM user, create one now from the IAM console Upload SSH public key or generate HTTPS credentials for your IAM user Clone your repository Clone your repository using the Clone URL (HTTPS or SSH) Download workshop artifacts Download reinforce-demo.zip Unzip reinforce-demo.zip and copy the contents to your local repository. The folder/file structure should look similar to below: /local-repo .git Ansible-RHEL7-CIS-Benchmarks-master scripts appspec.yml Note : Do not commit your files at this point. We will need to make changes to buildspec.yml in order for the solution to work.","title":"Setting up your repository"},{"location":"grc341/module-1.html#objective","text":"In this module we will create a CodeCommit repository to store our Ansible playbook and supporting files. We will also download the workshop artifacts that contain the Ansible playbook and copy them to our local repository While this should work in any commercial region, it was tested specifically in US-East-1.","title":"Objective"},{"location":"grc341/module-1.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client.","title":"Prerequisites"},{"location":"grc341/module-1.html#create-codecommit-repository","text":"Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Create CodeCommit repository"},{"location":"grc341/module-1.html#create-iam-user","text":"If you don't already have an IAM user, create one now from the IAM console Upload SSH public key or generate HTTPS credentials for your IAM user","title":"Create IAM user"},{"location":"grc341/module-1.html#clone-your-repository","text":"Clone your repository using the Clone URL (HTTPS or SSH)","title":"Clone your repository"},{"location":"grc341/module-1.html#download-workshop-artifacts","text":"Download reinforce-demo.zip Unzip reinforce-demo.zip and copy the contents to your local repository. The folder/file structure should look similar to below: /local-repo .git Ansible-RHEL7-CIS-Benchmarks-master scripts appspec.yml Note : Do not commit your files at this point. We will need to make changes to buildspec.yml in order for the solution to work.","title":"Download workshop artifacts"},{"location":"grc341/module-2.html","text":"Objective In this module we will create S3 buckets to store build artifacts and logs. We will also create an encryption key that will be used to encrypt data at rest. Lastly, we will create an IAM role that will give our ec2 instance permissions for SSM. While this should work in any commercial region, it was tested specifically in US-East-1. Prerequisites Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client. Create IAM role Click on the link below to launch the cloudformation template us-east-1 Setting up S3 bucket for build artifacts Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1 Click on the link below to launch the cloudformation template us-east-1 Setting up S3 bucket for logging Click on the link below to launch the cloudformation template us-east-1 Click on the link below to launch the cloudformation template us-east-1 Create KMS Key for encryption Click on the link below to launch the cloudformation template us-east-1","title":"Setting up supporting infrastructure"},{"location":"grc341/module-2.html#objective","text":"In this module we will create S3 buckets to store build artifacts and logs. We will also create an encryption key that will be used to encrypt data at rest. Lastly, we will create an IAM role that will give our ec2 instance permissions for SSM. While this should work in any commercial region, it was tested specifically in US-East-1.","title":"Objective"},{"location":"grc341/module-2.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client.","title":"Prerequisites"},{"location":"grc341/module-2.html#create-iam-role","text":"Click on the link below to launch the cloudformation template us-east-1","title":"Create IAM role"},{"location":"grc341/module-2.html#setting-up-s3-bucket-for-build-artifacts","text":"Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1 Click on the link below to launch the cloudformation template us-east-1","title":"Setting up S3 bucket for build artifacts"},{"location":"grc341/module-2.html#setting-up-s3-bucket-for-logging","text":"Click on the link below to launch the cloudformation template us-east-1 Click on the link below to launch the cloudformation template us-east-1","title":"Setting up S3 bucket for logging"},{"location":"grc341/module-2.html#create-kms-key-for-encryption","text":"Click on the link below to launch the cloudformation template us-east-1","title":"Create KMS Key for encryption"},{"location":"grc341/module-3.html","text":"Objective In this module we will create a CodeBuild Project to copy our files from our repository to S3. This will allow us to refernece the playbook url in S3 in our SSM Association in a later step. While this should work in any commercial region, it was tested specifically in US-East-1. Prerequisites Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client. Setting up your build project Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Setting up your build project"},{"location":"grc341/module-3.html#objective","text":"In this module we will create a CodeBuild Project to copy our files from our repository to S3. This will allow us to refernece the playbook url in S3 in our SSM Association in a later step. While this should work in any commercial region, it was tested specifically in US-East-1.","title":"Objective"},{"location":"grc341/module-3.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client.","title":"Prerequisites"},{"location":"grc341/module-3.html#setting-up-your-build-project","text":"Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Setting up your build project"},{"location":"grc341/module-4.html","text":"Objective In this module we will create a CodeDeploy application and deployment group. This will be used to deploy the Ansible playbook to our instance(s). While this should work in any commercial region, it was tested specifically in US-East-1. Prerequisites Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client. Setting up your application and deployment group Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Setting up your application"},{"location":"grc341/module-4.html#objective","text":"In this module we will create a CodeDeploy application and deployment group. This will be used to deploy the Ansible playbook to our instance(s). While this should work in any commercial region, it was tested specifically in US-East-1.","title":"Objective"},{"location":"grc341/module-4.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client.","title":"Prerequisites"},{"location":"grc341/module-4.html#setting-up-your-application-and-deployment-group","text":"Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Setting up your application and deployment group"},{"location":"grc341/module-5.html","text":"Objective In this module we will create an SSM Association to run the Ansible playbook on our instance(s) every 30 mins. This is where we enforce the continuous hardening by ensuring that our instance(s) always has the latest configuration. While this should work in any commercial region, it was tested specifically in US-East-1. Prerequisites Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client. Setting up the SSM Association Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Setting up SSM"},{"location":"grc341/module-5.html#objective","text":"In this module we will create an SSM Association to run the Ansible playbook on our instance(s) every 30 mins. This is where we enforce the continuous hardening by ensuring that our instance(s) always has the latest configuration. While this should work in any commercial region, it was tested specifically in US-East-1.","title":"Objective"},{"location":"grc341/module-5.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access AWS CLI set up on the local client.","title":"Prerequisites"},{"location":"grc341/module-5.html#setting-up-the-ssm-association","text":"Login to the AWS management console Click on the link below to launch the cloudformation template us-east-1","title":"Setting up the SSM Association"},{"location":"grc341/module-6.html","text":"Objective In this module we will update our buildspec.yml file with the artifacts bucket we created in an earlier module. Prerequisites Ensure you are logged into an AWS account with admin access Completed Setting up supporting infrastructure module Laptop with an IDE and git installed Update buildspec.yml Navigate to your local repository where you copied the contents of reinforce-demo.zip from an earlier module Open buildspec.yml in your IDE Edit buildspec.yml by replacing YOUR_ARTIFACTS_BUCKET_NAME with the name of the artifacts bucket created in an earlier module build: commands: - aws s3 cp --recursive --acl bucket-owner-full-control ./Ansible-RHEL7-CIS-Benchmarks-master/roles s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/Ansible-RHEL7-CIS-Benchmarks-master/roles - aws s3 cp --acl bucket-owner-full-control ./appspec.yml s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/appspec.yml - aws s3 cp --acl bucket-owner-full-control ./Ansible-RHEL7-CIS-Benchmarks-master/playbook.yml s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/Ansible-RHEL7-CIS-Benchmarks-master/playbook.yml - aws s3 cp --acl bucket-owner-full-control ./Ansible-RHEL7-CIS-Benchmarks-master/ansible.cfg s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/Ansible-RHEL7-CIS-Benchmarks-master/ansible.cfg - aws s3 cp --recursive --acl bucket-owner-full-control ./scripts s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/scripts Once you've updated buildspec.yml you can commit your changes to your origin","title":"Update buildspec"},{"location":"grc341/module-6.html#objective","text":"In this module we will update our buildspec.yml file with the artifacts bucket we created in an earlier module.","title":"Objective"},{"location":"grc341/module-6.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access Completed Setting up supporting infrastructure module Laptop with an IDE and git installed","title":"Prerequisites"},{"location":"grc341/module-6.html#update-buildspecyml","text":"Navigate to your local repository where you copied the contents of reinforce-demo.zip from an earlier module Open buildspec.yml in your IDE Edit buildspec.yml by replacing YOUR_ARTIFACTS_BUCKET_NAME with the name of the artifacts bucket created in an earlier module build: commands: - aws s3 cp --recursive --acl bucket-owner-full-control ./Ansible-RHEL7-CIS-Benchmarks-master/roles s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/Ansible-RHEL7-CIS-Benchmarks-master/roles - aws s3 cp --acl bucket-owner-full-control ./appspec.yml s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/appspec.yml - aws s3 cp --acl bucket-owner-full-control ./Ansible-RHEL7-CIS-Benchmarks-master/playbook.yml s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/Ansible-RHEL7-CIS-Benchmarks-master/playbook.yml - aws s3 cp --acl bucket-owner-full-control ./Ansible-RHEL7-CIS-Benchmarks-master/ansible.cfg s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/Ansible-RHEL7-CIS-Benchmarks-master/ansible.cfg - aws s3 cp --recursive --acl bucket-owner-full-control ./scripts s3://YOUR_ARTIFACTS_BUCKET_NAME/cis-rhel-ansible-master/scripts Once you've updated buildspec.yml you can commit your changes to your origin","title":"Update buildspec.yml"},{"location":"grc341/module-7.html","text":"Objective In this module we will provision and configure our instance(s) to receive the files necessary for the Ansible playbook to run. Prerequisites Ensure you are logged into an AWS account with admin access Completed all previous modules SSH Client to remote into your linux instance(s) Existing VPC with public/private subnets and outbound internet access Provision Red Hat Enterprise Linux 7 instance Navigate to the marketplace and search for Linux 7 Select Red Hat Enterprise Linux (RHEL) 7 (HVM) On Step 2: Choose an Instance Type select t2.micro On Step 3: Configure Instance Details provision the instance in a subnet that you have access to For IAM role select the IAM role created in Setting up supporting infrastructure On Step 5: Add Tags add the following tag Key:Deploy Value:CIS . CodeDeploy will use these tags to target instances to deploy the Ansible playbook On Step 6: Configure Security Group configure SSH access Launch your instance(s) Note : Ideally we would provision the instance in a private subnet and connect over VPN. If you do not have a VPN configured for your VPC, you can provision the instance in a public subnet for this workshop. Make sure to lockdown SSH access to just your device. Configure instance(s) First, we need to update our instance(s) sudo yum update -y Install epel-repo sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Install pip sudo yum install wget -y sudo wget https://bootstrap.pypa.io/get-pip.py sudo python get-pip.py Install Ansible sudo pip install ansible Install AWS cli sudo pip install awscli Install SSM agent sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm Install CodeDeploy agent sudo yum install -y ruby cd /home/ec2-user sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install sudo chmod +x ./install sudo ./install auto Make sure SSM and CodeDeploy agents are running sudo systemctl status amazon-ssm-agent sudo service codedeploy-agent status The instance is now configured with Ansible, SSM and CodeDeploy agents and is ready to receive and run the ansible playbook from the reinforce-demo artifacts.","title":"Provision and Configure Instance(s)"},{"location":"grc341/module-7.html#objective","text":"In this module we will provision and configure our instance(s) to receive the files necessary for the Ansible playbook to run.","title":"Objective"},{"location":"grc341/module-7.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access Completed all previous modules SSH Client to remote into your linux instance(s) Existing VPC with public/private subnets and outbound internet access","title":"Prerequisites"},{"location":"grc341/module-7.html#provision-red-hat-enterprise-linux-7-instance","text":"Navigate to the marketplace and search for Linux 7 Select Red Hat Enterprise Linux (RHEL) 7 (HVM) On Step 2: Choose an Instance Type select t2.micro On Step 3: Configure Instance Details provision the instance in a subnet that you have access to For IAM role select the IAM role created in Setting up supporting infrastructure On Step 5: Add Tags add the following tag Key:Deploy Value:CIS . CodeDeploy will use these tags to target instances to deploy the Ansible playbook On Step 6: Configure Security Group configure SSH access Launch your instance(s) Note : Ideally we would provision the instance in a private subnet and connect over VPN. If you do not have a VPN configured for your VPC, you can provision the instance in a public subnet for this workshop. Make sure to lockdown SSH access to just your device.","title":"Provision Red Hat Enterprise Linux 7 instance"},{"location":"grc341/module-7.html#configure-instances","text":"First, we need to update our instance(s) sudo yum update -y Install epel-repo sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Install pip sudo yum install wget -y sudo wget https://bootstrap.pypa.io/get-pip.py sudo python get-pip.py Install Ansible sudo pip install ansible Install AWS cli sudo pip install awscli Install SSM agent sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm Install CodeDeploy agent sudo yum install -y ruby cd /home/ec2-user sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install sudo chmod +x ./install sudo ./install auto Make sure SSM and CodeDeploy agents are running sudo systemctl status amazon-ssm-agent sudo service codedeploy-agent status The instance is now configured with Ansible, SSM and CodeDeploy agents and is ready to receive and run the ansible playbook from the reinforce-demo artifacts.","title":"Configure instance(s)"},{"location":"grc341/module-8.html","text":"Objective In this module we will create the pipeline to autoomate the deployment of the Ansible playbook as changes are made. Prerequisites Ensure you are logged into an AWS account with admin access Completed all previous modules Laptop with an IDE and git installed Create pipeline Login to the AWS management console In the Source stage, for Action Provider select AWS CodeCommit For Repository name select the repository created in module-1 from the drop down For Branch name select the branch to monitor for changes from the drop down In the Build stage, for Action Provider select AWS CodeBuild For Project name select the project created in module-3 from the drop down In the Deploy stage, for Action Provider select AWS CodeDeploy For Application name select the application created in module-4 from the drop down For Deployment group select the deployment group created in module-4 from the drop down Review and create pipeline","title":"Setting up CodePipeline"},{"location":"grc341/module-8.html#objective","text":"In this module we will create the pipeline to autoomate the deployment of the Ansible playbook as changes are made.","title":"Objective"},{"location":"grc341/module-8.html#prerequisites","text":"Ensure you are logged into an AWS account with admin access Completed all previous modules Laptop with an IDE and git installed","title":"Prerequisites"},{"location":"grc341/module-8.html#create-pipeline","text":"Login to the AWS management console In the Source stage, for Action Provider select AWS CodeCommit For Repository name select the repository created in module-1 from the drop down For Branch name select the branch to monitor for changes from the drop down In the Build stage, for Action Provider select AWS CodeBuild For Project name select the project created in module-3 from the drop down In the Deploy stage, for Action Provider select AWS CodeDeploy For Application name select the application created in module-4 from the drop down For Deployment group select the deployment group created in module-4 from the drop down Review and create pipeline","title":"Create pipeline"}]}